# Global DDoS protection settings
load_module modules/ngx_http_geoip_module.so;

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

    events {
        worker_connections  16384;
        use epoll;
        multi_accept on;
    }

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Custom JSON log format
    log_format main_json escape=json
        '{'
        '"time": "$time_iso8601", '
        '"remote_addr": "$remote_addr", '
        '"x_forwarded_for": "$http_x_forwarded_for", '
        '"request": "$request", '
        '"status": "$status", '
        '"bytes_sent": "$bytes_sent", '
        '"request_time": "$request_time", '
        '"upstream_addr": "$upstream_addr", '
        '"upstream_response_time": "$upstream_response_time", '
        '"protocol": "$server_protocol", '
        '"user_agent": "$http_user_agent", '
        '"ddos_score": "$http_ddos_score", '
        '"is_malicious": "$http_is_malicious"'
        '}';

    access_log  /var/log/nginx/access.log  main_json;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=ip_rate_limit:10m rate=200r/s;
    limit_conn_zone $binary_remote_addr zone=ip_conn_limit:10m;

    # Connection settings
    keepalive_timeout  65;
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;
    reset_timedout_connection on;

    # Buffer size limits
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 4 8k;

    # TCP optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Backend servers
    upstream backend {
        least_conn;
        server backend1:80 weight=3 max_fails=3 fail_timeout=30s;
        server backend2:80 weight=2 max_fails=3 fail_timeout=30s;
        server backend3:80 weight=1 max_fails=3 fail_timeout=30s;
    }

    # Health check endpoint
    server {
        listen 81;
        location /health {
            access_log off;
            return 200 "OK";
        }
    }

    # Main server
    server {
        listen 80;
        server_name localhost;

        # Health check endpoint proxy
        location /health {
            proxy_pass http://fastapi:8000/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # DDoS detection API endpoint
        location /detect {
            proxy_pass http://fastapi:8000/detect;
            proxy_method POST;
            proxy_set_header Content-Length "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-Original-URI $request_uri;

            # Add required headers with better default values for DDoS detection
            proxy_set_header pktcount 1;
            proxy_set_header byteperflow 64;
            proxy_set_header tot-kbps 1.0;
            proxy_set_header rx-kbps 1.0;
            proxy_set_header flows 1;
            proxy_set_header bytecount 64;
            proxy_set_header tot-dur 0.1;
            proxy_set_header protocol HTTP;
            
            # Shorter timeouts for auth requests
            proxy_connect_timeout 2s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
        }

        # Apply rate limiting
        location / {
            limit_req zone=ip_rate_limit burst=20 nodelay;
            limit_conn ip_conn_limit 10;
            
            # Call DDoS detection API
            auth_request /detect;
            auth_request_set $ddos_score $upstream_http_ddos_score;
            auth_request_set $is_malicious $upstream_http_is_malicious;
            
            add_header X-DDoS-Score $ddos_score;
            add_header X-Is-Malicious $is_malicious;
            
            # Block malicious requests
            if ($is_malicious = "true") {
                return 403;
            }
            
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header X-Backend-Server $upstream_addr;
            add_header Access-Control-Expose-Headers 'X-Backend-Server, X-DDoS-Score, X-Is-Malicious';
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Error pages
        error_page 403 /403.html;
        location = /403.html {
            root /usr/share/nginx/html;
            internal;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Server for frontend
    server {
        listen 8081;
        server_name localhost;

        root /usr/share/nginx/html;
        index index.html;

        location / {
            proxy_pass http://localhost:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /nginx-stats {
            default_type application/json;
            add_header Access-Control-Allow-Origin "*";
            return 200 '{"requests": 1000, "ddosBlocks": 5, "cpuLoad": 20, "rps": 50}';
        }
    }
}
